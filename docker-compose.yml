version: '3.8'

services:
  # Node.js Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cmu-iot-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - TZ=Asia/Bangkok
    volumes:
      - ./public:/app/public
      - ./server.js:/app/server.js
      - ./package.json:/app/package.json
      - ./nodemon.json:/app/nodemon.json
      - ./node_modules:/app/node_modules
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Optional - for future use)
  # Uncomment this section when you're ready to use a database
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: cmu-iot-db
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_USER=iot_user
  #     - POSTGRES_PASSWORD=iot_password
  #     - POSTGRES_DB=iot_airquality
  #     - TZ=Asia/Bangkok
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - iot-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U iot_user -d iot_airquality"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Redis Cache (Optional - for caching API responses)
  # Uncomment this section when you want to add caching
  # redis:
  #   image: redis:7-alpine
  #   container_name: cmu-iot-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - iot-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Nginx Reverse Proxy (Optional - for production deployment)
  # Uncomment this section for production with SSL/TLS
  # nginx:
  #   image: nginx:alpine
  #   container_name: cmu-iot-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - app
  #   networks:
  #     - iot-network

networks:
  iot-network:
    driver: bridge

# Uncomment volumes when enabling database and cache services
# volumes:
#   postgres_data:
#     driver: local
#   redis_data:
#     driver: local
